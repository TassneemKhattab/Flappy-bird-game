
import pygame
import random
import time

pygame.init()

SCREEN = pygame.display.set_mode((500, 750))  

BACKGROUND_IMAGE = pygame.image.load('background.jpg')

#  BIRD
BIRD_IMAGE = pygame.image.load('flappybird.png')
bird_x = 50
bird_y = 300
bird_y_change = 0

def display_bird(x, y):
    SCREEN.blit(BIRD_IMAGE, (x, y))

# OBSTACLES
OBSTACLE_WIDTH = 70
OBSTACLE_HEIGHT_1 = random.randint(150,450)
OBSTACLE_HEIGHT_2 = random.randint(150,450)

OBSTACLE_COLOR = (211, 253, 117)
OBSTACE_X_CHANGE = -4
obstacle_1_x = 500
obstacle_2_x = 1000

def display_obstacle(height1, height2):
    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_1_x, 0, OBSTACLE_WIDTH, height1))
    bottom_obstacle_height = 635 - height1 - 150
    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_1_x, 635-bottom_obstacle_height, OBSTACLE_WIDTH, bottom_obstacle_height))


    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_2_x, 0, OBSTACLE_WIDTH, height2))
    bottom_obstacle_height = 635 - height2 - 150
    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_2_x, 635-bottom_obstacle_height, OBSTACLE_WIDTH, bottom_obstacle_height))

   # COLLISION DETECTION
def collision_detection (obstacle_1_x, obstacle_2_x, obstacle_height_1, obstacle_height_2, bird_y, bottom_obstacle_height_1, bottom_obstacle_height_2):
    if obstacle_1_x >= 50 and obstacle_1_x <= (50 + 64):
        if bird_y <= obstacle_height_1 or bird_y >= (bottom_obstacle_height_1 - 64):
            return True
    if obstacle_2_x >= 50 and obstacle_2_x <= (50 + 64):
        if bird_y <= obstacle_height_2 or bird_y >= (bottom_obstacle_height_2 - 64):
            return True
    return False

# SCORE
score = 0
SCORE_FONT = pygame.font.Font('freesansbold.ttf', 32)

def score_display(score):
    display = SCORE_FONT.render(f"Score: {score}", True, (255,255,255))
    SCREEN.blit(display, (10, 10))

# START SCREEN
startFont = pygame.font.Font('freesansbold.ttf', 32)
def start():
    # displays: "press space bar to start)
    global obstacle_1_x, obstacle_2_x
    display = startFont.render(f"PRESS SPACE BAR TO START", True, (255, 255, 255))
    SCREEN.blit(display, (20, 200))
    obstacle_1_x = 500
    obstacle_2_x = 1000
    pygame.display.update()

# GAME OVER SCREEN
score_list = [0]

game_over_font1 = pygame.font.Font('freesansbold.ttf', 64)
game_over_font2 = pygame.font.Font('freesansbold.ttf', 32)

def game_over():
    # check for the maximum score
    maximum = max(score_list)
    #  "game over"
    display1 = game_over_font1.render(f"GAME OVER", True, (200,35,35))
    SCREEN.blit(display1, (50, 300))
    # shows your current score and your max score
    display2 = game_over_font2.render(f"SCORE: {score} MAX SCORE: {maximum}", True, (255, 255, 255))
    SCREEN.blit(display2, (50, 400))
    #  If your new score is the same as the maximum then u reached a new high score
    if score == maximum:
        display3 = game_over_font2.render(f"NEW HIGH SCORE!!", True, (200,35,35))
        SCREEN.blit(display3, (80, 100))

running = True
# waiting is going to refer to end or start screen
waiting = True
# set collision to false in the beginning so that we only see the start screen in the beginning
collision = False


SCREEN.blit(BACKGROUND_IMAGE, (0, 0))
pygame.display.update()
start()


while waiting:

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                #  If we press the space bar we will exit out of the waiting while loop and start to play the game
                score = 0
                bird_y = 300
                obstacle_1_x = 500
                #  to exit out of the while loop
                waiting = False
                SCREEN.fill((0, 0, 0))
                SCREEN.blit(BACKGROUND_IMAGE, (0, 0))

        if event.type == pygame.QUIT:
            # in case we exit out make both running and waiting false
            waiting = False
            running = False


while running:
    if collision:
        #If collision is True (from the second time onwards) we will see both the end screen and the start screen
        game_over()
        start()
        waiting = True
        while waiting:

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        #  If we press the space bar we will exit out of the waiting while loop and start to play the game
                        score = 0
                        bird_y = 300
                        obstacle_1_x = 500
                        #  to exit out of the while loop
                        waiting = False
                        SCREEN.fill((0, 0, 0))
                        SCREEN.blit(BACKGROUND_IMAGE, (0, 0))

                if event.type == pygame.QUIT:
                    # in case we exit out make both running and waiting false
                    waiting = False
                    running = False

        
    #else:
        # This refers to the first time the player is starting the game
        #start()
    time.sleep(0.01)

    # display the background image
    SCREEN.blit(BACKGROUND_IMAGE, (0, 0))

   

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            # If you press exit you exit out of the while loop and pygame quits
            running = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                #  if you press spacebar you will move up
                bird_y_change = -6

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                # when u release space bar you will move down automatically
                bird_y_change = 3

    # moving the bird vertically
    bird_y += bird_y_change
    # setting boundaries for the birds movement
    if bird_y <= 0:
        bird_y = 0
    if bird_y >= 571:
        bird_y = 571

    # Moving the obstacle
    obstacle_1_x += OBSTACE_X_CHANGE
    obstacle_2_x += OBSTACE_X_CHANGE

    # COLLISION
    collision = collision_detection(obstacle_1_x, obstacle_2_x, OBSTACLE_HEIGHT_1, OBSTACLE_HEIGHT_2,
                                    bird_y, OBSTACLE_HEIGHT_1 + 150, OBSTACLE_HEIGHT_2 + 150)

    if collision:
        score_list.append(score)
        waiting = True

    # generating new obstacles
    if obstacle_1_x <= -10:
        obstacle_1_x = obstacle_2_x + 500
        OBSTACLE_HEIGHT_1 = random.randint(200, 400)
        score += 1
    if obstacle_2_x <= -10:
        obstacle_2_x = obstacle_1_x + 500
        OBSTACLE_HEIGHT_2 = random.randint(200, 400)
        score += 1
    # displaying the obstacle
    display_obstacle(OBSTACLE_HEIGHT_1, OBSTACLE_HEIGHT_2)

    # displaying the bird
    display_bird(bird_x, bird_y)

    # display the score
    score_display(score)

    # Update the display after each iteration of the while loop
    pygame.display.update()

# Quit the program
pygame.quit()
